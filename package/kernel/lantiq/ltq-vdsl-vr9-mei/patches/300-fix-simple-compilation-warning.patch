--- a/src/drv_mei_cpe_linux.c
+++ b/src/drv_mei_cpe_linux.c
@@ -67,7 +67,7 @@
 #if (MEI_SUPPORT_DEBUG_LOGGER == 1)
 #include <linux/skbuff.h>
 #include <linux/netlink.h>
-#include <net/sock.h>
+#include <net/netlink.h>
 #endif
 
 /* add MEI CPE debug/printout part */
@@ -1718,8 +1718,8 @@ static void MEI_MeminfoProcPerDevGet(str
                      ", CRC = 0x%08X"
 #endif
                      MEI_DRV_CRLF,
-                     chunkIdx, pChunk[chunkIdx].pImageChunk_aligned,
-                     pChunk[chunkIdx].pImageChunk_allocated,
+                     chunkIdx, (unsigned int)pChunk[chunkIdx].pImageChunk_aligned,
+                     (unsigned int)pChunk[chunkIdx].pImageChunk_allocated,
                      pChunk[chunkIdx].imageChunkSize_byte,
                      pChunk[chunkIdx].eImageChunkType
 #if (MEI_SUPPORT_OPTIMIZED_FW_DL == 1)
--- a/src/drv_mei_cpe_download_vrx.c
+++ b/src/drv_mei_cpe_download_vrx.c
@@ -3139,9 +3139,9 @@ IFX_int32_t MEI_DEV_IoctlFirmwareDownloa
 {
    IFX_int32_t ret = 0;
    MEI_DEV_T *pMeiDev = pMeiDynCntrl->pMeiDev;
-#if (MEI_EXPORT_INTERNAL_API == 1) && (MEI_DRV_ATM_PTM_INTERFACE_ENABLE == 1)
-   MEI_TC_Reset_t tc_reset = {0};
-#endif
+// #if (MEI_EXPORT_INTERNAL_API == 1) && (MEI_DRV_ATM_PTM_INTERFACE_ENABLE == 1)
+//    MEI_TC_Reset_t tc_reset = {0};
+// #endif
 #if (MEI_SUPPORT_OPTIMIZED_FW_DL == 1)
    IFX_boolean_t bChunksReuse = IFX_FALSE;
 #endif
